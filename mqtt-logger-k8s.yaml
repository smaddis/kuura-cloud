apiVersion: v1
kind: ConfigMap
metadata:
  name: mqtt-logger-config
data:
  mqtt_logger.yaml: |-
    MQTT_URL: ""
    MQTT_PORT: 443
    CLIENT_ID: ""
    CLIENT_USERNAME: ""
    CLIENT_PASSWORD: ""
    CERT_PATH: "/app/certs/"
    TSDB_URL: "timeseriesdb-service.smad.svc"
    TSDB_PORT: 8086
    TSDB_PROTOCOL: "http"
    TSDB_USERNAME: ""
    TSDB_PASSWORD: ""
    TSDB_ORG: ""
    TSDB_BUCKET: ""
    LOG_FILE_PATH: "/persist/mqtt_messages.log"
    LOG_LEVEL: "INFO"

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: timeseriesdb-config
data:
  config.yaml: |-
    assets-path: ""
    bolt-path: /var/lib/influxdb2/influxd.bolt
    e2e-testing: false
    engine-path: /var/lib/influxdb2/engine
    feature-flags: {}
    flux-log-enabled: false
    http-bind-address: :8086
    http-idle-timeout: 3m0s
    http-read-header-timeout: 10s
    http-read-timeout: 0s
    http-write-timeout: 0s
    influxql-max-select-buckets: 0
    influxql-max-select-point: 0
    influxql-max-select-series: 0
    key-name: ""
    log-level: info
    metrics-disabled: false
    nats-max-payload-bytes: 1048576
    nats-port: 4222
    no-tasks: false
    pprof-disabled: false
    query-concurrency: 1024
    query-initial-memory-bytes: 0
    query-max-memory-bytes: 0
    query-memory-bytes: 9223372036854775807
    query-queue-size: 1024
    reporting-disabled: false
    secret-store: bolt
    session-length: 60
    session-renew-disabled: false
    storage-cache-max-memory-size: 1073741824
    storage-cache-snapshot-memory-size: 26214400
    storage-cache-snapshot-write-cold-duration: 10m0s
    storage-compact-full-write-cold-duration: 4h0m0s
    storage-compact-throughput-burst: 50331648
    storage-max-concurrent-compactions: 0
    storage-max-index-log-file-size: 1048576
    storage-no-validate-field-size: false
    storage-retention-check-interval: 30m0s
    storage-series-file-max-concurrent-snapshot-compactions: 0
    storage-series-id-set-cache-size: 0
    storage-shard-precreator-advance-period: 30m0s
    storage-shard-precreator-check-interval: 10m0s
    storage-tsm-use-madv-willneed: false
    storage-validate-keys: false
    storage-wal-fsync-delay: 0s
    store: bolt
    testing-always-allow-setup: false
    tls-cert: ""
    tls-key: ""
    tls-min-version: "1.2"
    tls-strict-ciphers: false
    tracing-type: ""
    ui-disabled: false
    vault-addr: ""
    vault-cacert: ""
    vault-capath: ""
    vault-client-cert: ""
    vault-client-key: ""
    vault-client-timeout: 0s
    vault-max-retries: 0
    vault-skip-verify: false
    vault-tls-server-name: ""
    vault-token: ""

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: timeseriesdb-init-script
data:
  setup.sh: |-
    #!/bin/bash
    set -e
    
    # Create a bucket for persisting data.
    BUCKET_ID=$(influx bucket create \
      --name ${DOCKER_INFLUXDB_DATA_BUCKET} \
      --org ${DOCKER_INFLUXDB_INIT_ORG} |tail -1 |expand -t 1 |cut -d " " -f1)
    
    # Create a user
    influx user create \
      --name ${DOCKER_INFLUXDB_AUTH_USERNAME} \
      --password ${DOCKER_INFLUXDB_AUTH_PASSWORD} \
      --org ${DOCKER_INFLUXDB_INIT_ORG}
    
    # Authenticate the user for writing to the bucket.
    influx auth create \
      --user ${DOCKER_INFLUXDB_AUTH_USERNAME} \
      --write-bucket ${BUCKET_ID} \
      --org ${DOCKER_INFLUXDB_INIT_ORG}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mqtt-logger-persistent-volume
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: timeseriesdb-varlib-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: timeseriesdb-etc-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mqtt-logger
  labels:
    name: mqtt-logger
spec:
  replicas: 1
  selector:
    matchLabels:
      name: mqtt-logger
  template:
    metadata:
      labels:
        name: mqtt-logger
    spec:
      containers:
      - name: mqtt-logger-container
        image: 
        imagePullPolicy: Always
        volumeMounts:
        - mountPath: /persist
          name: mqtt-logger-volume
        - mountPath: /etc/mqtt-logger
          name: mqtt-config-volume
        - mountPath: /app/certs
          name: cert-volume
          #readOnly: true
      volumes:
        - name: mqtt-logger-volume
          persistentVolumeClaim:
            claimName: mqtt-logger-persistent-volume
        - name: mqtt-config-volume
          configMap:
            name: mqtt-logger-config
        - name: cert-volume
          secret:
            secretName: ca-cert

---

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: '1'
  generation: 1
  labels:
    name: grafana
  name: grafana
  namespace: smad
  resourceVersion: '2152504528'
  selfLink: /apis/apps/v1/namespaces/smad/deployments/grafana
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: grafana
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: grafana
    spec:
      containers:
        - image: 'docker.io/grafana/grafana:10.2.0'
          imagePullPolicy: IfNotPresent
          name: grafana
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          envFrom:
          - secretRef:
              name: grafana-creds
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          name: grafana-config
        name: grafana-config
status:
  availableReplicas: 1
  conditions:
    - lastTransitionTime: '2023-11-05T11:44:33Z'
      lastUpdateTime: '2023-11-05T11:44:33Z'
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: 'True'
      type: Available
    - lastTransitionTime: '2023-11-05T11:44:13Z'
      lastUpdateTime: '2023-11-05T11:44:33Z'
      message: ReplicaSet "grafana-bc6c8d9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: 'True'
      type: Progressing
  observedGeneration: 1
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: timeseriesdb
  labels:
    name: timeseriesdb
spec:
  replicas: 1
  selector:
    matchLabels:
      name: timeseriesdb
  template:
    metadata:
      labels:
        name: timeseriesdb
    spec:
      containers:
      - name: timeseriesdb-container
        image: influxdb:2.7.1
        env:
        - name: DOCKER_INFLUXDB_INIT_MODE
          valueFrom:
            secretKeyRef:
              name: timeseriesdb-creds
              key: MODE
        - name: DOCKER_INFLUXDB_INIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: timeseriesdb-creds
              key: USERNAME
        - name: DOCKER_INFLUXDB_INIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: timeseriesdb-creds
              key: PASSWORD
        - name: DOCKER_INFLUXDB_INIT_ORG
          valueFrom:
            secretKeyRef:
              name: timeseriesdb-creds
              key: ORG
        - name: DOCKER_INFLUXDB_INIT_BUCKET
          valueFrom:
            secretKeyRef:
              name: timeseriesdb-creds
              key: BUCKET
        - name: DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
          valueFrom:
            secretKeyRef:
              name: timeseriesdb-creds
              key: ADMIN_TOKEN
        - name: DOCKER_INFLUXDB_DATA_BUCKET
          valueFrom:
            secretKeyRef:
              name: timeseriesdb-creds
              key: DATA_BUCKET
        - name: DOCKER_INFLUXDB_AUTH_USERNAME
          valueFrom:
            secretKeyRef:
              name: timeseriesdb-creds
              key: AUTH_USERNAME
        - name: DOCKER_INFLUXDB_AUTH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: timeseriesdb-creds
              key: AUTH_PASSWORD
        volumeMounts:
        - mountPath: /etc/influxdb2/config.yml
          name: timeseriesdb-config-volume
        - mountPath: /docker-entrypoint-initdb.d
          name: timeseriesdb-init-script-volume
        - mountPath: /var/lib/influxdb2
          name: timeseriesdb-varlib-volume
        - mountPath: /etc/influxdb2
          name: timeseriesdb-etc-volume
      volumes:
        - name: timeseriesdb-config-volume
          configMap:
            name: timeseriesdb-config
        - name: timeseriesdb-init-script-volume
          configMap:
            name: timeseriesdb-init-script
        - name: timeseriesdb-varlib-volume
          persistentVolumeClaim:
            claimName: timeseriesdb-varlib-pvc
        - name: timeseriesdb-etc-volume
          persistentVolumeClaim:
            claimName: timeseriesdb-etc-pvc

---

apiVersion: v1
kind: Secret
metadata:
  name: timeseriesdb-creds
type: opaque
stringData:
  MODE: setup
  USERNAME: 
  PASSWORD: 
  ORG: 
  BUCKET: 
  ADMIN_TOKEN: 
  DATA_BUCKET: 
  AUTH_USERNAME: 
  AUTH_PASSWORD: 

---

apiVersion: v1
kind: Secret
metadata:
  name: grafana-creds
  namespace: smad
  resourceVersion: '2152508284'
  selfLink: /api/v1/namespaces/smad/secrets/grafana-creds
  uid: 4c3b054f-7bd1-11ee-b18c-fa163e081ad5
type: Opaque
data:
  GF_SECURITY_ADMIN_PASSWORD: 
  GF_SECURITY_ADMIN_USER: 

---

apiVersion: v1
kind: Secret
metadata:
  name: ca-cert
type: opaque
data:
  ca.cert.pem: |-


---

apiVersion: v1
kind: Service
metadata:
  name: timeseriesdb-service
spec:
  selector:
    name: timeseriesdb
  ports:
    - name: tls
      port: 8086
      targetPort: 8086

---

apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    name: timeseriesdb-route
  name: timeseriesdb-route
  namespace: smad
spec:
  host: 
  port:
    targetPort: influx
  tls:
    termination: edge
    key: |-
    certificate: |-
    caCertificate: |-
  to:
    kind: Service
    name: timeseriesdb-outward-service
    weight: 100
  wildcardPolicy: None
status:
  ingress:
    - conditions:
        - lastTransitionTime: '2023-09-28T14:52:28Z'
          status: 'True'
          type: Admitted
      host: 
      routerName: router
      wildcardPolicy: None

---

kind: Service
apiVersion: v1
metadata:
  name: timeseriesdb-outward-service
  labels:
    name: timeseriesdb-outward-service
spec:
  selector:
    name: timeseriesdb
  ports:
    - port: 8086
      name: influx
  type: NodePort

---

apiVersion: v1
kind: Service
metadata:
  labels:
    name: timeseriesdb
  name: timeseriesdbi-inward-service
  namespace: smad
  resourceVersion: '2152501312'
  selfLink: /api/v1/namespaces/smad/services/timeseriesdb
spec:
  ports:
    - port: 8086
      protocol: TCP
      targetPort: 8086
  selector:
    name: timeseriesdb
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}

---

apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    name: grafana-route
  name: grafana-route
  namespace: smad
spec:
  host: 
  port:
    targetPort: grafana
  tls:
    termination: edge
    key: |-
    certificate: |-
    caCertificate: |-
  to:
    kind: Service
    name: grafana-outward-service
    weight: 100
  wildcardPolicy: None
status:
  ingress:
    - conditions:
        - lastTransitionTime: '2023-09-28T14:52:28Z'
          status: 'True'
          type: Admitted
      host: 
      routerName: router
      wildcardPolicy: None

---

kind: Service
apiVersion: v1
metadata:
  name: grafana-outward-service
  labels:
    name: grafana-outward-service
spec:
  selector:
    name: grafana
  ports:
    - port: 3000
      name: grafana
  type: NodePort

